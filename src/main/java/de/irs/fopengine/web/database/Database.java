package de.irs.fopengine.web.database;

import java.sql.*;

import java.util.List;
import java.util.Optional;


public class Database {

    public static final String DB_CONNECTION_STRING = "jdbc:mysql://localhost:3306/fopengine?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    public static final String USER_NAME = "root";
    public static final String PASSWORD = "admin";

    private static Database database = null;
    private Connection connection;

    private Database(String dbConnectionString, String userName, String password) throws SQLException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        connection = DriverManager.getConnection(dbConnectionString, userName, password);
    }

    public synchronized static Database getInstance() throws SQLException {
        if (!Optional.ofNullable(database).isPresent()) {
            database = new Database(DB_CONNECTION_STRING, USER_NAME,
                    PASSWORD);
        }
        return database;
    }

    public void destroy() throws SQLException {
        if (!connection.isClosed()) {
            connection.close();
        }
    }



    public int update(String aSql, List<String> params) throws SQLException {
        PreparedStatement ps = prepareStatement(aSql, params);
        int result = ps.executeUpdate();
        return result;
    }

    public int delete(String aSql, List<String> params) throws SQLException {
        PreparedStatement ps = prepareStatement(aSql, params);
        int result = ps.executeUpdate();
        return result;
    }

    public int insert(String aSql) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(aSql, Statement.RETURN_GENERATED_KEYS);
        ps.executeUpdate();
        ResultSet tableKeys = ps.getGeneratedKeys();
        tableKeys.next();
        int autoGeneratedID = tableKeys.getInt(1);
        return autoGeneratedID;
    }

    public ResultSet select(String aSql, List<String> params) throws SQLException {
        PreparedStatement ps = prepareStatement(aSql, params);
        ResultSet rs = ps.executeQuery();
        return rs;
    }

    private PreparedStatement prepareStatement(String aSql, List<String> params) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(aSql);
        if (params != null) {
            int index = 1;
            for (Object param : params) {
                ps.setObject(index, param);
                index++;
            }
        }
        return ps;
    }


    public Connection getConnection() {
        return connection;
    }
}

